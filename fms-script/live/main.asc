load("util/Load.asc");

Load.loadFile("core/CoreModel.asc");

Load.loadFile("vo/MsgVO.asc");
Load.loadFile("vo/ModuleID.asc");

Load.loadFile("chat/ChatModel.asc");
Load.loadFile("chat/ChatModuleEvtType.asc");

Load.loadFile("user/UserModel.asc");
Load.loadFile("user/UserModuleEvtType.asc");

application.onAppStart = function()
{
	trace("app start");
	application.allowDebug = true;
	application.onlineClients = {}; //记录在线client的字典
	
	application.userModel = UserModel.getInstance();
	application.chatModel = ChatModel.getInstance();
	
	application.speakerPeerID = "";
}

application.onConnect = function(client, userVO)
{	
	trace("onConnect--->", client.agent , client.ip, userVO.name, client.farID);
	var name = userVO.name;
	var msgVO = new MsgVO();
	if(application.onlineClients[name] == null)
	{			
		application.onlineClients[name] = client;
		application.acceptConnection(client);
		
		//通知所有人, 当前client已被接受上线		
		msgVO.moduleID = new ModuleID().USER;
		msgVO.type = new UserModuleEvtType().ONLINE;
		msgVO.content = {"ip":client.ip, "name":name};
		application.broadcastMsg("messageCallBack", msgVO);
		
		if(name == 'sparrowplayer')
		{
			application.speakerPeerID = client.farID;
		}
		else
		{
			//此时仍为user module
			msgVO.type = new UserModuleEvtType().PEERID;
			msgVO.content = {'peerID':application.speakerPeerID};
			client.call("messageCallBack", null, msgVO);
		}
	}
	else //已存在同名用户，拒绝当前连接请求
	{
		msgVO.moduleID = new ModuleID().NET;
		msgVO.content = {'msg':"已存在同名大虾，少年换个名字再来战斗吧"};
		application.rejectConnection(client, msgVO);
	}
}

//当一个客户机从这个应用程序断开连接时调用
application.onDisconnect = function(client)
{
	//告诉其他在线用户某用户已断开链接		
	var name;
	for(var n in application.onlineClients)
	{
		if(application.onlineClients[n] == client)
		{
			name = n;
			break;
		}
	}
	
	if(!name)
	{
		return;
	}
	trace("disconnect------>", name);
	
	var msgVO = new MsgVO();
	msgVO.moduleID = new ModuleID().USER;
	msgVO.type = new UserModuleEvtType().OFFLINE;
	msgVO.content = {'name':name};
	application.broadcastMsg("messageCallBack", msgVO);		
	delete application.onlineClients[name];
}

Client.prototype.sendMessage = function(msgVO)
{
	//这里的this指的的是Client
	CoreModel.getInstance().retrievalCallback(this, msgVO);
}



